
import { useState } from 'react';
import { Shield, Loader2, Download } from 'lucide-react';
import { Card } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { useToast } from '@/hooks/use-toast';

interface MaskRecommendationProps {
  aqiData: {
    aqi: number;
    location: string;
  };
  getAQILevel: (aqi: number) => any;
}

export const MaskRecommendation = ({ aqiData, getAQILevel }: MaskRecommendationProps) => {
  const [recommendation, setRecommendation] = useState<any>(null);
  const [loading, setLoading] = useState(false);
  const { toast } = useToast();

  const getMaskRecommendation = async () => {
    setLoading(true);
    try {
      const response = await fetch('https://generativelanguage.googleapis.com/v1beta/models/gemini-1.5-flash-latest:generateContent?key=AIzaSyC8fekQzgrly17DLFoZKVMpBxl-Z5NW8n8', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          contents: [{
            parts: [{
              text: `Based on an AQI of ${aqiData.aqi} in ${aqiData.location}, recommend the most suitable mask type and explain why. Include:
              1. Recommended mask type (N95, N99, KN95, Surgical, Cloth)
              2. Why this specific mask is needed for this AQI level
              3. Protection level it provides
              4. Duration of safe usage
              5. Special considerations for children/elderly
              Keep the response structured and informative but concise.`
            }]
          }]
        })
      });

      const data = await response.json();
      const aiText = data.candidates?.[0]?.content?.parts?.[0]?.text || 'Unable to generate recommendation';
      
      setRecommendation({
        text: aiText,
        maskType: aqiData.aqi > 200 ? 'N99' : aqiData.aqi > 150 ? 'N95' : aqiData.aqi > 100 ? 'KN95' : 'Surgical',
        aqi: aqiData.aqi,
        location: aqiData.location
      });

      toast({
        title: "Recommendation Generated",
        description: "AI-powered mask recommendation is ready",
      });
    } catch (error) {
      toast({
        title: "Error",
        description: "Failed to generate recommendation",
        variant: "destructive",
      });
    } finally {
      setLoading(false);
    }
  };

  const downloadReport = () => {
    if (!recommendation) return;
    
    const reportContent = `
Pollution Mask Recommendation Report
Generated: ${new Date().toLocaleDateString()}

Location: ${recommendation.location}
AQI Level: ${recommendation.aqi}
Air Quality: ${getAQILevel(recommendation.aqi).level}

Recommended Mask: ${recommendation.maskType}

AI Analysis:
${recommendation.text}

---
Generated by Pollution Mask Recommender App
    `;
    
    const blob = new Blob([reportContent], { type: 'text/plain' });
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = `mask-recommendation-${aqiData.location}-${new Date().toISOString().split('T')[0]}.txt`;
    document.body.appendChild(a);
    a.click();
    document.body.removeChild(a);
    URL.revokeObjectURL(url);

    toast({
      title: "Report Downloaded",
      description: "Your mask recommendation report has been saved",
    });
  };

  return (
    <Card className="p-6 h-fit">
      <div className="space-y-4">
        <div className="flex items-center gap-3 mb-4">
          <div className="w-10 h-10 bg-blue-100 dark:bg-blue-900 rounded-lg flex items-center justify-center">
            <Shield className="h-6 w-6 text-blue-600 dark:text-blue-400" />
          </div>
          <h3 className="text-xl font-semibold text-gray-900 dark:text-white">
            AI Mask Recommendation
          </h3>
        </div>

        {!recommendation ? (
          <div className="text-center py-8">
            <p className="text-gray-600 dark:text-gray-300 mb-4">
              Get personalized mask recommendations based on current air quality using AI analysis.
            </p>
            <Button 
              onClick={getMaskRecommendation}
              disabled={loading}
              className="bg-blue-600 hover:bg-blue-700 text-white"
            >
              {loading ? (
                <>
                  <Loader2 className="h-4 w-4 mr-2 animate-spin" />
                  Analyzing...
                </>
              ) : (
                'Get AI Recommendation'
              )}
            </Button>
          </div>
        ) : (
          <div className="space-y-4">
            <div className="bg-blue-50 dark:bg-blue-900/30 rounded-lg p-4">
              <div className="font-semibold text-blue-900 dark:text-blue-100 mb-2">
                Recommended: {recommendation.maskType} Mask
              </div>
              <div className="text-sm text-blue-700 dark:text-blue-200 whitespace-pre-wrap">
                {recommendation.text}
              </div>
            </div>
            
            <div className="flex gap-2">
              <Button 
                onClick={getMaskRecommendation}
                disabled={loading}
                variant="outline"
                className="flex-1"
              >
                {loading ? (
                  <Loader2 className="h-4 w-4 mr-2 animate-spin" />
                ) : (
                  'Refresh Recommendation'
                )}
              </Button>
              <Button 
                onClick={downloadReport}
                variant="outline"
                className="flex items-center gap-2"
              >
                <Download className="h-4 w-4" />
                Download
              </Button>
            </div>
          </div>
        )}
      </div>
    </Card>
  );
};
